version: '3.8'

services:
  # Microservices
  orders-service:
    build:
      context: ./services/orders_service
    container_name: orders-service
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - CHAOS_ENABLED=true
      - FAILURE_RATE=0.1
      - LATENCY_SPIKE_RATE=0.15
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    networks:
      - reliability-net
    depends_on:
      - jaeger
    restart: unless-stopped

  users-service:
    build:
      context: ./services/users_service
    container_name: users-service
    ports:
      - "8002:8002"
    environment:
      - PORT=8002
      - CHAOS_ENABLED=true
      - FAILURE_RATE=0.08
      - LATENCY_SPIKE_RATE=0.12
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    networks:
      - reliability-net
    depends_on:
      - jaeger
    restart: unless-stopped

  payments-service:
    build:
      context: ./services/payments_service
    container_name: payments-service
    ports:
      - "8003:8003"
    environment:
      - PORT=8003
      - CHAOS_ENABLED=true
      - FAILURE_RATE=0.12
      - LATENCY_SPIKE_RATE=0.20
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    networks:
      - reliability-net
    depends_on:
      - jaeger
    restart: unless-stopped

  # Anomaly Detection Service
  anomaly-service:
    build:
      context: ./anomaly_service
    container_name: anomaly-service
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - PROMETHEUS_URL=http://prometheus:9090
      - CHECK_INTERVAL=30
    networks:
      - reliability-net
    depends_on:
      - prometheus
    restart: unless-stopped

  # Policy Engine
  policy-engine:
    build:
      context: ./policy_engine
    container_name: policy-engine
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - ANOMALY_SERVICE_URL=http://anomaly-service:8080
      - CHECK_INTERVAL=30
      - AUTO_REMEDIATION_ENABLED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - reliability-net
    depends_on:
      - anomaly-service
    restart: unless-stopped

  # Dashboard
  dashboard:
    build:
      context: ./dashboard
    container_name: dashboard
    ports:
      - "3000:3000"
    networks:
      - reliability-net
    depends_on:
      - anomaly-service
      - policy-engine
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - reliability-net
    restart: unless-stopped

  # Loki
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/loki-config.yml
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - reliability-net
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - reliability-net
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  # AI Service
  ai-service:
    build:
      context: ./ai_service
    container_name: ai-service
    ports:
      - "8090:8090"
    environment:
      - PORT=8090
      - GROQ_MODEL=openai/gpt-oss-120b
      - PROMETHEUS_URL=http://prometheus:9090
      - LOKI_URL=http://loki:3100
      - JAEGER_API=http://jaeger:16686/api
      # Set secret at runtime: GROQ_API_KEY
    networks:
      - reliability-net
    depends_on:
      - prometheus
      - loki
      - jaeger
    restart: unless-stopped
  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - reliability-net
    restart: unless-stopped

networks:
  reliability-net:
    driver: bridge

volumes:
  prometheus-data:
  loki-data:
  grafana-data:


